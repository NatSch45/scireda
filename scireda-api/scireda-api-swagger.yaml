openapi: 3.0.0
info:
  description: |
    Private API of Scireda web application
  version: '0.1.0'
  title: Scireda
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: nathan.schneider@ynov.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  - url: 'https://scireda.com/scireda-api'
  - url: 'http://localhost:3333/scireda-api'
tags:
  - name: Authentication
    description: Authentication handling
  - name: Networks
    description: Networks handling (CRUD)
  - name: Folders
    description: Folders handling
  - name: Notes
    description: Notes handling (CRUD)

paths:
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Register a new user in the DB
      operationId: register
      parameters:
        - name: email
          in: query
          description: The email of the user to register
          required: true
          schema:
            type: string
            format: email
        - name: username
          in: query
          description: The username of the user to register
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password of the user to register
          required: true
          schema:
            type: string
            format: password
      responses:
        '201':
          description: User successfully registered
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login a user
      description: Login a user with the provided user data
      operationId: login
      parameters:
        - name: email
          in: query
          description: Email of the user to log in
          required: true
          schema:
            type: string
            format: email
        - name: password
          in: query
          description: Password of the user to log in
          required: true
          schema:
            type: string
            format: password
      responses:
        '200':
          description: User successfully logged in
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/me:
    get:
      tags:
        - Authentication
      summary: Retrieve all information about the current logged user
      description: Retrieve all information about the current logged user, i.e. the user associated to the given bearer token
      operationId: me
      security:
        - bearerAuth: []
      responses:
        '200':
          description: The user information is successfully retrieved
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: Log out the current user
      description: Log out the current user by removing the active associated authentication token
      operationId: logout
      security:
        - bearerAuth: []
      responses:
        '200':
          description: The user authentication token has succefully been deleted
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /networks:
    get:
      tags:
        - Networks
      summary: Get all networks of the authenticated user
      description: From the user associated to the access token provided, retrieve all his networks
      operationId: getAllNetworks
      security:
        - bearerAuth: []
      responses:
        '200':
          description: All the networks have been successfully retrieved
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Networks
      summary: Create a new network
      description: Create a new network for the authenticated user
      operationId: createNetwork
      security:
        - bearerAuth: []
      requestBody:
        description: Data of the network to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NetworkCreation'
      responses:
        '201':
          description: The new network has successfully been created*
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Network'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /networks/{id}:
    put:
      tags:
        - Networks
      summary: Update a network
      description: Update the name of a network from its id
      operationId: updateNetwork
      parameters:
        - name: id
          in: path
          description: The id of the network to update
          required: true
          schema:
            type: integer
            format: int64
      security:
        - bearerAuth: []
      requestBody:
        description: The new data to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NetworkUpdate'
      responses:
        '200':
          description: The network have been successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Network'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Networks
      summary: Delete a network
      description: Delete a network from its id
      operationId: deleteNetwork
      parameters:
        - name: id
          in: path
          description: The id of the network to delete
          required: true
          schema:
            type: integer
            format: int64
      security:
        - bearerAuth: []
      responses:
        '204':
          description: The network has been successfully deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Network'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /folders:
    post:
      tags:
        - Folders
      summary: Create a new folder
      description: Create a new folder in the wanted network
      operationId: createFolder
      security:
        - bearerAuth: []
      requestBody:
        description: The new data to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FolderCreation'
      responses:
        '200':
          description: The folder has been successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Folder'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /folders/top-level:
    get:
      tags:
        - Folders
      summary: Get top-level folders
      description: Retrieve top-level folders from a given network
      operationId: getTopLevelFolders
      security:
        - bearerAuth: []
      parameters:
        - name: networkId
          in: query
          description: The network from which retrieve the top-level folders
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Top-level folders have been successfully retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FolderWithContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /folders/{id}:
    get:
      tags:
        - Folders
      summary: Get folder content
      description: Retrieve a folder and all the notes or folders it contains
      operationId: getFolderContent
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: The id of the folder to retrieve
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Folder with content successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FolderWithContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Folders
      summary: Delete a folder
      description: Delete a folder from its id
      operationId: deleteFolder
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: The id of the folder to delete
          required: true
          schema:
            type: integer
            format: int64
        - name: force
          in: query
          description: Choose whether perform a force deletion or not
          required: false
          schema:
            type: boolean
            default: false
      responses:
        '204':
          description: The folder has been successfully deleted
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /notes/top-level:
    get:
      tags:
        - Notes
      summary: Retrieve top-level notes
      description: Retrieve all top-level notes of a given network
      operationId: getTopLevelNotesByNetwork
      security:
        - bearerAuth: []
      parameters:
        - name: networkId
          in: query
          description: The id of the network from which the notes are retrieved
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The notes have been successfully retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Note'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /notes:
    get:
      tags:
        - Notes
      summary: Retrieve notes by folder
      description: Retrieve notes contained in the wanted folder
      operationId: getNotesByFolder
      security:
        - bearerAuth: []
      parameters:
        - name: folderId
          in: query
          description: The id of the folder containing the wanted notes
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The notes have been successfully retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Note'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Notes
      summary: Create a new note
      description: Create a new note
      operationId: createNote
      security:
        - bearerAuth: []
      requestBody:
        description: Data of the note to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NoteUpsert'
      responses:
        '201':
          description: The note has been successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /notes/{id}:
    put:
      tags:
        - Notes
      summary: Update a note
      description: Update a note
      operationId: updateNote
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: The id of the note to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: The new note data to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NoteUpsert'
      responses:
        '200':
          description: The note has been successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Notes
      summary: Delete a note
      description: Delete a note from its id
      operationId: deleteNote
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: The id of the note to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: The note has been successfully deleted
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  schemas:
    Network:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        userId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    NetworkCreation:
      type: object
      properties:
        name:
          type: string
        userId:
          type: string
          format: uuid
    NetworkUpdate:
      type: object
      properties:
        name:
          type: string
    Folder:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        networkId:
          type: integer
          format: int64
        parentId:
          type: integer
          format: int64
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    FolderCreation:
      type: object
      properties:
        name:
          type: string
        networkId:
          type: integer
          format: int64
        parentId:
          type: integer
          format: int64
    FolderWithContent:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        networkId:
          type: integer
          format: int64
        parentId:
          type: integer
          format: int64
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        network:
          $ref: '#/components/schemas/Network'
        notes:
          type: array
          items:
            $ref: '#/components/schemas/Note'
        subFolders:
          type: array
          items:
            $ref: '#/components/schemas/Folder'
    Note:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        content:
          type: string
        networkId:
          type: integer
          format: int64
        parentId:
          type: integer
          format: int64
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    NoteUpsert:
      type: object
      properties:
        title:
          type: string
        content:
          type: string
        networkId:
          type: integer
          format: int64
        parentId:
          type: integer
          format: int64

  #  parameters:
  #  requestBodies:
  responses:
    BadRequest:
      description: The request is malformed or misses some data
    NotFound:
      description: The requested data has not been found in DB
    Unauthorized:
      description: The request does not contain a valid bearer token
    InternalServerError:
      description: An unknown internal server error occurred
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: AdonisJS opaque token
    api_key:
      type: apiKey
      name: api_key
      in: header
